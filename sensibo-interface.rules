val String APIKey = "INSERT-API-KEY"
var String PodID

/*** Read Pod ID ***/

rule "Read Pod ID"

  when
    System started
  then

  try {          
    var String PodsResult
  
    do {
      PodsResult = executeCommandLine('curl -sS "https://home.sensibo.com/api/v2/users/me/pods?apiKey=' + APIKey + '"', 10000)
    } while (!PodsResult.contains('"status": "success"'))

    PodID = transform("JSONPATH", "$.result[0].id", PodsResult)
  }

  catch(Throwable t) {
    logError("ReadPodID", "Error was caught: {}", t)
  }

end

/*** Read Sensibo State ***/

rule "Read Sensibo State"

  when
    System started
  then

  Thread::sleep(10000)

  try {
    var String PodStatus 
      
    do {
      Thread::sleep(5000)
      PodStatus = executeCommandLine('curl -sS "https://home.sensibo.com/api/v2/pods/' + PodID + '/acStates?apiKey=' + APIKey + '&limit=1&fields=acState"', 5000)
    } while (!PodStatus.contains('"status": "success"'))
    
    val String PodOn = (transform("JSONPATH", "$.result[0].acState.on", PodStatus))
    val String PodMode = (transform("JSONPATH", "$.result[0].acState.mode", PodStatus))
    val Number PodTarget = new Integer(transform("JSONPATH", "$.result[0].acState.targetTemperature", PodStatus))
    val String PodFan = (transform("JSONPATH", "$.result[0].acState.fanLevel", PodStatus))

    if (PodOn == "true")
      { postUpdate(SensiboState, ON) }

    if (PodOn == "false")
      { postUpdate(SensiboState, OFF) }

    postUpdate(SensiboTarget, PodTarget)
    postUpdate(SensiboMode, PodMode)
    postUpdate(SensiboFan, PodFan)

    if (PodStatus.contains('"swing": ')) {
      val String PodSwing = (transform("JSONPATH", "$.result[0].acState.swing", PodStatus))
      postUpdate(SensiboSwing, PodSwing)
    }
  }

  catch(Throwable t) {
    logError("Sensibo read state", "Error was caught: {}", t)
  }

end
  

/*** Read Sensibo Measurements ***/

rule "Read Sensibo Measurements"

  when
    Time cron "0 0/5 * * * ?"
  then

  try {
    var String PodMeasurements
      
    do {
      PodMeasurements = executeCommandLine('curl -sS "https://home.sensibo.com/api/v2/pods/' + PodID + '/measurements?apiKey=' + APIKey + '&fields=temperature,humidity,batteryVoltage"', 5000)
      Thread::sleep(5000)
    } while (!PodMeasurements.contains('"status": "success"'))
        
    val Number PodTemperature = new Double(transform("JSONPATH", "$.result[0].temperature", PodMeasurements))
    val Number PodHumidity = new Double(transform("JSONPATH", "$.result[0].humidity", PodMeasurements))

    postUpdate(SensiboTemp, PodTemperature)
    postUpdate(SensiboHumidity, PodHumidity)

    if (!PodMeasurements.contains('"batteryVoltage": null')) {
      val Number PodBattery = new Integer(transform("JSONPATH", "$.result[0].batteryVoltage", PodMeasurements))
      postUpdate(SensiboBattery, PodBattery)
    }
  }
  
  catch(Throwable e) {
    logError("Sensibo measurements", "Error was caught: {}", e)
  }

end

/*** Write Sensibo State ***/

rule "Write Sensibo State"

  when
    Item SensiboState changed or
    Item SensiboMode received command or
    Item SensiboFan received command or
    Item SensiboSwing received command or
    Item SensiboTarget received command
  then
  
  try {

    Thread::sleep(1000)         // Avoid race condition where state has not yet been updated

    var Boolean PodBoolean

    if (SensiboState.state == ON)
      { PodBoolean = true }
    else
      { PodBoolean = false }

    var String CommandURL = 'https://home.sensibo.com/api/v2/pods/' + PodID + '/acStates?apiKey=' + APIKey

    var String CommandState = '{"acState":{"on":' + PodBoolean + ','
    var String CommandMode = '"mode":"' + SensiboMode.state + '",'
    var String CommandFan = '"fanLevel":"' + SensiboFan.state + '",'
    var String CommandSwing = ""

    if (SensiboSwing.state != "")
      { CommandSwing = '"swing":"' + SensiboSwing.state + '",' }

    var String CommandTemp = '"targetTemperature":' + (SensiboTarget.state as DecimalType).intValue + '}}'
    var String CommandData = CommandState + CommandMode + CommandFan + CommandSwing + CommandTemp

    var String UpdateResult
    var Number Attempts = 0
  
    do {
      Attempts += 1
      logInfo("Sensibo command", CommandData)
      UpdateResult = executeCommandLine('curl@@-sSH@@\'Content-Type: application/json\'@@-XPOST@@' + CommandURL + '@@-d@@'+ CommandData, 10000)
      logInfo("Sensibo result", UpdateResult)
      Thread::sleep(5000)
    } while (!UpdateResult.contains('"status": "success"') && Attempts < 5)
  
    if (Attempts == 5) {
      logError("Sensibo write", "5 failures updating Sensibo")
    }      
  }

  catch(Throwable t) {
    logError("Sensibo write", "Error was caught: {}", t)
  }

end
